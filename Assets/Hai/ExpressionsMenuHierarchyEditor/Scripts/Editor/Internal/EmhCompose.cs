using System;
using System.Collections.Generic;
using System.Linq;
using Hai.ExpressionsMenuHierarchyEditor.Scripts.Components;
using UnityEditor;
using UnityEngine;
using VRC.SDK3.Avatars.ScriptableObjects;
using Object = UnityEngine.Object;

namespace Hai.ExpressionsMenuHierarchyEditor.Scripts.Editor.Internal
{
    public class EmhCompose
    {
        private Dictionary<ExpressionsMenuHierarchyItem, VRCExpressionsMenu> _visited;
        private Dictionary<Texture2D, Dictionary<Material, Texture2D>> _generatedIcons = new Dictionary<Texture2D, Dictionary<Material, Texture2D>>();
        private readonly VRCExpressionsMenu _mainAssetContainer;
        private readonly Texture2D _defaultIconOptional;
        private readonly ExpressionsMenuHierarchyItem _mainMenu;
        private readonly VRCExpressionsMenu _generatedMenu;

        private readonly bool _discardApplicable;
        private readonly VRCExpressionParameters _expressionParametersOptional;
        private string[] _discardTags;
        private readonly Emh.EmhDiscardType _compilerDiscardType;
        private readonly Material _discardGrayOut;
        private Texture2D _blankIconNullable;

        public EmhCompose(ExpressionsMenuHierarchyCompiler compiler)
        {
            _mainAssetContainer = compiler.generatedMenu;
            _defaultIconOptional = compiler.defaultIcon;
            _mainMenu = compiler.mainMenu;
            _generatedMenu = compiler.generatedMenu;
            _expressionParametersOptional = compiler.expressionParameters;
            _discardTags = !string.IsNullOrEmpty(compiler.discardTags) ? compiler.discardTags.Split(',') : new string[0];
            _compilerDiscardType = compiler.discardType == Emh.EmhDiscardType.Default ? Emh.EmhDiscardType.GrayOut : compiler.discardType;
            _discardGrayOut = compiler.discardGrayOut == null
                ? new Material(Shader.Find("Hai/ExpressionsMenuHierarchyEditorGrayOut"))
                : compiler.discardGrayOut;

            // Last operation (depends on the previous lines)
            _discardApplicable = compiler.autoDiscard && (_expressionParametersOptional != null || _discardTags.Length != 0);
        }

        public void Compose()
        {
            var sweep = new EmhAnalysis().Analyze(_mainMenu);

            var menuItemCounter = 0; // Absolutely dumb use of ToDictionary
            _visited = sweep.ToDictionary(item => item, item =>
            {
                if (item == _mainMenu)
                {
                    return _generatedMenu;
                }

                var newSubMenu = ScriptableObject.CreateInstance<VRCExpressionsMenu>();
                newSubMenu.name = $"_{menuItemCounter}_{item.name}";
                AssetDatabase.AddObjectToAsset(newSubMenu, _mainAssetContainer);
                menuItemCounter++;

                return newSubMenu;
            });
            ClearPreviousAssets();
            Build();
        }

        private void ClearPreviousAssets()
        {
            var allSubAssets = AssetDatabase.LoadAllAssetsAtPath(AssetDatabase.GetAssetPath(_mainAssetContainer));
            foreach (var subAsset in allSubAssets)
            {
                if (subAsset.name.StartsWith($"zAutogenerated__") && (subAsset is VRCExpressionsMenu || subAsset is Texture2D))
                {
                    AssetDatabase.RemoveObjectFromAsset(subAsset);
                }
            }
        }

        public string[] FindAssets()
        {
            return _visited.Values.Select(AssetDatabase.GetAssetPath).ToArray();
        }

        private void Build()
        {
            foreach (var pair in _visited)
            {
                var currentSubMenu = pair.Key;
                var destination = pair.Value;

                destination.controls.Clear();
                var itemsCreatedInThisMenuSoFar = 0;
                foreach (var item in currentSubMenu.AllActiveSubMenuItems())
                {
                    if (itemsCreatedInThisMenuSoFar >= 8)
                    {
                        return;
                    }

                    if (_discardApplicable && ShouldBeDiscarded(item))
                    {
                        var currentDiscard = item.discardType == Emh.EmhDiscardType.Default ? _compilerDiscardType : item.discardType;
                        if (currentDiscard != Emh.EmhDiscardType.Remove)
                        {
                            CreateDiscardMenuItem(item, destination, currentDiscard);
                            itemsCreatedInThisMenuSoFar++;
                        }
                    }
                    else
                    {
                        CreateNormalMenuItem(destination, item);
                        itemsCreatedInThisMenuSoFar++;
                    }
                }
            }
        }

        private void CreateNormalMenuItem(VRCExpressionsMenu destination, ExpressionsMenuHierarchyItem item)
        {
            var iconNullable = item.icon != null ? item.icon : _defaultIconOptional;
            var finalIconNullable = iconNullable != null && item.shader != null ? CreateOrGetIcon(iconNullable, item.shader) : iconNullable;
            destination.controls.Add(new VRCExpressionsMenu.Control
            {
                type = TypeIn(item.type),
                name = item.ResolveName(),
                icon = finalIconNullable,
                value = item.value,
                parameter = new VRCExpressionsMenu.Control.Parameter
                {
                    name = item.parameter
                },
                // style = control.style,
                subMenu = SubMenu(item, _visited),
                subParameters = SubParams(item),
                labels = SubLabels(item),
            });
        }

        private void CreateDiscardMenuItem(ExpressionsMenuHierarchyItem item, VRCExpressionsMenu destination, Emh.EmhDiscardType currentDiscard)
        {
            switch (currentDiscard)
            {
                case Emh.EmhDiscardType.BlankOut:
                    destination.controls.Add(new VRCExpressionsMenu.Control
                    {
                        type = VRCExpressionsMenu.Control.ControlType.Button,
                        name = "",
                        icon = BlankIcon(),
                        value = 0,
                        parameter = new VRCExpressionsMenu.Control.Parameter
                        {
                            name = ""
                        },
                        subMenu = null,
                        subParameters = new VRCExpressionsMenu.Control.Parameter[0],
                        labels = new VRCExpressionsMenu.Control.Label[0],
                    });
                    break;
                case Emh.EmhDiscardType.GrayOut:
                    var iconNullable = item.icon != null ? item.icon : _defaultIconOptional;
                    var finalIconNullable = iconNullable != null && item.shader != null ? CreateOrGetIcon(iconNullable, item.shader) : iconNullable;
                    var grayedOutIcon = finalIconNullable != null ? CreateOrGetIcon(finalIconNullable, _discardGrayOut) : null;
                    destination.controls.Add(new VRCExpressionsMenu.Control
                    {
                        type = VRCExpressionsMenu.Control.ControlType.Button,
                        name = item.ResolveName(),
                        icon = grayedOutIcon,
                        value = 0,
                        parameter = new VRCExpressionsMenu.Control.Parameter
                        {
                            name = ""
                        },
                        subMenu = null,
                        subParameters = new VRCExpressionsMenu.Control.Parameter[0],
                        labels = new VRCExpressionsMenu.Control.Label[0],
                    });
                    break;
                case Emh.EmhDiscardType.Remove:
                case Emh.EmhDiscardType.Default:
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }

        private Texture2D CreateOrGetIcon(Texture2D icon, Material shader)
        {
            if (!_generatedIcons.ContainsKey(icon))
            {
                _generatedIcons.Add(icon, new Dictionary<Material, Texture2D>());
            }

            var generatedShaders = _generatedIcons[icon];
            if (!generatedShaders.ContainsKey(shader))
            {
                var generatedIcon = GenerateIcon(icon, shader);
                generatedIcon.name = "zAutogenerated__icon__" + UnityEngine.Random.Range(0, Int32.MaxValue);

                AssetDatabase.AddObjectToAsset(generatedIcon, _mainAssetContainer);
                generatedShaders.Add(shader, generatedIcon);
            }

            return generatedShaders[shader];
        }

        public static Texture2D GenerateIcon(Texture2D icon, Material shader)
        {
            if (shader == null)
            {
                return icon;
            }
            var newTexture = new Texture2D(icon.width, icon.height, TextureFormat.RGBA32, true);

            var destination = RenderTexture.GetTemporary(icon.width, icon.height, 24);
            var tempMat = Object.Instantiate(shader);
            tempMat.SetTexture("_MainTex", icon);
            Graphics.Blit(icon, destination, tempMat);
            Object.DestroyImmediate(tempMat);
            RenderTextureTo(destination, newTexture);
            RenderTexture.ReleaseTemporary(destination);

            return newTexture;
        }

        private static void RenderTextureTo(RenderTexture renderTexture, Texture2D texture2D)
        {
            RenderTexture.active = renderTexture;
            texture2D.ReadPixels(new Rect(0, 0, renderTexture.width, renderTexture.height), 0, 0);
            texture2D.Apply();
            RenderTexture.active = null;
        }

        private Texture2D BlankIcon()
        {
            if (_blankIconNullable != null)
            {
                return _blankIconNullable;
            }

            _blankIconNullable = new Texture2D(2, 2, TextureFormat.RGBA32, true);
            _blankIconNullable.SetPixels(Enumerable.Repeat(Color.clear, 4).ToArray());
            _blankIconNullable.name = "zAutogenerated__icon__" + UnityEngine.Random.Range(0, Int32.MaxValue);

            AssetDatabase.AddObjectToAsset(_blankIconNullable, _mainAssetContainer);

            return _blankIconNullable;
        }

        private bool ShouldBeDiscarded(ExpressionsMenuHierarchyItem item)
        {
            var qualify = item.Qualify(_expressionParametersOptional, _discardTags);
            return qualify != Emh.EmhQualification.ElementIsAesthetic && qualify != Emh.EmhQualification.ElementIsFunctional;
        }

        private VRCExpressionsMenu.Control.ControlType TypeIn(Emh.EmhType controlType)
        {
            switch (controlType)
            {
                case Emh.EmhType.SubMenu:
                    return VRCExpressionsMenu.Control.ControlType.SubMenu;
                case Emh.EmhType.Button:
                    return VRCExpressionsMenu.Control.ControlType.Button;
                case Emh.EmhType.Toggle:
                    return VRCExpressionsMenu.Control.ControlType.Toggle;
                case Emh.EmhType.TwoAxisPuppet:
                    return VRCExpressionsMenu.Control.ControlType.TwoAxisPuppet;
                case Emh.EmhType.FourAxisPuppet:
                    return VRCExpressionsMenu.Control.ControlType.FourAxisPuppet;
                case Emh.EmhType.RadialPuppet:
                    return VRCExpressionsMenu.Control.ControlType.RadialPuppet;
                default:
                    throw new ArgumentOutOfRangeException(nameof(controlType), controlType, null);
            }
        }

        private VRCExpressionsMenu SubMenu(ExpressionsMenuHierarchyItem currentItem, Dictionary<ExpressionsMenuHierarchyItem, VRCExpressionsMenu> mappings)
        {
            if (currentItem.type != Emh.EmhType.SubMenu) return null;
            switch (currentItem.subMenuSource)
            {
                case Emh.EmhSubMenuSource.HierarchyChildren:
                    return mappings[currentItem];
                case Emh.EmhSubMenuSource.ExpressionMenuAsset:
                    return currentItem.subMenuAsset;
                case Emh.EmhSubMenuSource.HierarchyReference:
                    var subControl = currentItem.subMenuHierarchyReference.GetComponent<ExpressionsMenuHierarchyItem>();
                    return currentItem.subMenuHierarchyReference != null && subControl != null ? mappings[subControl] : null;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }

        private VRCExpressionsMenu.Control.Parameter[] SubParams(ExpressionsMenuHierarchyItem currentItem)
        {
            switch (currentItem.type)
            {
                case Emh.EmhType.TwoAxisPuppet:
                    return new[]
                    {
                        new VRCExpressionsMenu.Control.Parameter { name = currentItem.puppetParameter0 },
                        new VRCExpressionsMenu.Control.Parameter { name = currentItem.puppetParameter1 },
                    };
                case Emh.EmhType.FourAxisPuppet:
                    return new[]
                    {
                        new VRCExpressionsMenu.Control.Parameter { name = currentItem.puppetParameter0 },
                        new VRCExpressionsMenu.Control.Parameter { name = currentItem.puppetParameter1 },
                        new VRCExpressionsMenu.Control.Parameter { name = currentItem.puppetParameter2 },
                        new VRCExpressionsMenu.Control.Parameter { name = currentItem.puppetParameter3 },
                    };
                case Emh.EmhType.RadialPuppet:
                    return new[]
                    {
                        new VRCExpressionsMenu.Control.Parameter { name = currentItem.puppetParameter0 },
                    };
                case Emh.EmhType.SubMenu:
                case Emh.EmhType.Button:
                case Emh.EmhType.Toggle:
                    return new VRCExpressionsMenu.Control.Parameter[0];
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }

        private VRCExpressionsMenu.Control.Label[] SubLabels(ExpressionsMenuHierarchyItem currentItem)
        {
            switch (currentItem.type)
            {
                case Emh.EmhType.TwoAxisPuppet:
                case Emh.EmhType.FourAxisPuppet:
                    return new[]
                    {
                        EmhDecompose.LabelOf(currentItem.puppetLabelUp), EmhDecompose.LabelOf(currentItem.puppetLabelRight), EmhDecompose.LabelOf(currentItem.puppetLabelDown), EmhDecompose.LabelOf(currentItem.puppetLabelLeft),
                    };
                case Emh.EmhType.RadialPuppet:
                case Emh.EmhType.SubMenu:
                case Emh.EmhType.Button:
                case Emh.EmhType.Toggle:
                    return new VRCExpressionsMenu.Control.Label[0];
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }
    }
}
